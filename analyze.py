"""
This program produces a bar plot comparing the number of police interventions by town with
each town's total population (% vs %).

Inputs are police activity reports per day, in microsoft word format. Python library
docx2txt is used to convert word docs into txt.

The input file code_municipalities_2.csv contains information about the towns population in percentage of the
total population of the region.

2 output files are also generated by this program: the incident frequencies per town (stats.csv) and
incident frequencies at the region level (stats_mrc.csv)

The plot is contained in the pdf file  'chart.pdf'

"""

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import docx2txt


def string_num(row_num):
    """
    This function returns a 3-character string that contains a register row number
    in a police daily report
    """
    if row_num < 10:
        return '00'+str(row_num)
    else:
        return '0'+str(row_num)


if __name__ == '__main__' :

    path = 'input_files/temp/sq/'
    files = os.listdir(path)
    files.sort()

    print(files)

    f=open('input.txt','w')
    for fname in files:
        fullname=path+fname
        text=docx2txt.process(fullname)
        f.write(text)
    f.close()

    with open('input.txt', 'r') as infile, open('output.txt', 'w') as outfile:
        for line in infile:
            if not line.strip(): continue  # skip the empty line
            outfile.write(line)  # non-empty line. Write it to output
        infile.close()
        outfile.close()


    mrc_data = pd.DataFrame(columns=['event','mun'])
    f = open('output.txt', 'r')
    row_num = 1
    new_row = False
    for line in f:
        s = line.strip()
        if s[0:3] == '373':
            row_num = 1
            continue
        if ((s[0:3] == string_num(row_num)) | (s=='participation')):
            event = ''
            mun = ''
            if s=='participation':
                row_num = row_num -1
                event=s
            row_num +=1
            new_row = True
            continue
        if new_row:
            if len(s) > 5:
                event = s
                continue
            if s[0:2] == '77':
                mun = s
                df = pd.DataFrame([[event,mun]], columns=['event','mun'])
                mrc_data = pd.concat([mrc_data,df], ignore_index=True)
                new_row = False

    mrc_data['unit']=1
    mrc_data.to_csv('debug.csv')   #keep the raw data for verification and debugging if need be

    stats_by_mun = mrc_data.groupby(['mun','event'])['unit'].sum().to_frame().reset_index()
    stats_mrc = mrc_data.groupby(['event'])['unit'].sum().to_frame().reset_index()
    stats_mrc = stats_mrc.sort_values('unit', ascending=False).reset_index()
    stats_by_mun.to_csv('stats.csv')
    stats_mrc.to_csv('stats_mrc.csv')

    mrc_data = mrc_data[mrc_data['event']!=""]
    tot_act = mrc_data['unit'].sum()


    tot_by_mun = mrc_data.groupby('mun')['unit'].sum().to_frame().reset_index()
    tot_by_mun['pourc'] = round(tot_by_mun['unit'] / tot_act *100, 2)

    mun_data = pd.read_csv('code_municipalites_2.csv')


    tot_mrc_pop = mun_data['pop'].sum()
    mun_data['pourc'] = round(100* mun_data['pop'] / tot_mrc_pop,2)
    mun_data['mun']=mun_data['mun'].astype(str)


    # combine the 2 dfs by mun  (sql join)
    merged_df = pd.merge(tot_by_mun, mun_data, on= 'mun')



    #### bar plot section

    fig, ax = plt.subplots()

    bar_width = 0.35

    N = len(merged_df)

    ind=np.arange(N)

    rects1 = ax.barh(ind+bar_width, merged_df['pourc_x'], bar_width, color='b')

    rects2 = ax.barh(ind,merged_df['pourc_y'], bar_width, color='r')

    ax.set_ylabel('Municipalités')
    ax.set_xlabel('Pourcentage')
    ax.set_title(str(tot_act)+' interventions en octobre 2017')
    ax.set_yticks(ind+bar_width)
    ax.set_yticklabels(merged_df['mun'])
    ax.legend((rects1[0], rects2[0]), ('activités', 'pourc. pop.'))

    plt.tight_layout()
    #plt.show()
    plt.savefig('chart.pdf')
